@page "/fetchdata"
@using SolarView.Client.Common.Models
@using SolarView.Client.Common.Services.SolarView
@inject ISolarViewService SolarViewService

<h1>Average Power Data</h1>

<div>
	<SfDateRangePicker @ref="ChartDateRange" Min="@_siteStartDate" Max="@MaxEndDate" ValueChanged="OnDateRangeChanged" Placeholder="Choose a Range"></SfDateRangePicker>
</div>

@if (PowerData == null)
{
	<p><em>Select a date range...</em></p>
}
else
{
	<div>
		<SfChart Height="600" Title="@($"Period: {StartDate:yyyy-MM-dd} to {EndDate:yyyy-MM-dd}")">
			<ChartEvents Load="ChartLoad" />
			<ChartArea>
				<ChartAreaBorder Width="0"/>
			</ChartArea>
			<ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" LabelFormat="{value}"
			                   IntervalType="IntervalType.Auto" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
				<ChartAxisMajorGridLines Width="0"/>
			</ChartPrimaryXAxis>
			<ChartPrimaryYAxis LabelFormat="{value}W" Minimum="0" Maximum="6500" Interval="500">
				<ChartAxisLineStyle Width="0"/>
				<ChartAxisMajorTickLines Width="0"/>
			</ChartPrimaryYAxis>
			<ChartTooltipSettings Enable="true"/>
			<ChartSeriesCollection>
				@*green*@
				<ChartSeries DataSource="@PowerData" Name=@nameof(SolarView.Client.Common.Models.PowerData.Production) XName=@nameof(SolarView.Client.Common.Models.PowerData.Time) Width="2"
				             Opacity="0.8" Fill="#2bab4d" YName=@nameof(SolarView.Client.Common.Models.PowerData.Production) Type="ChartSeriesType.SplineArea">
				</ChartSeries>
				@*red*@
				<ChartSeries DataSource="@PowerData" Name=@nameof(SolarView.Client.Common.Models.PowerData.Consumption) XName=@nameof(SolarView.Client.Common.Models.PowerData.Time) Width="2"
				             Opacity="0.7" Fill="#d12e2e" YName=@nameof(SolarView.Client.Common.Models.PowerData.Consumption) Type="ChartSeriesType.SplineArea">
				</ChartSeries>
				@*blue*@
				<ChartSeries DataSource="@PowerData" Name=@nameof(SolarView.Client.Common.Models.PowerData.SelfConsumption) XName=@nameof(SolarView.Client.Common.Models.PowerData.Time) Width="2"
				             Opacity="0.9" Fill="#316bde" YName=@nameof(SolarView.Client.Common.Models.PowerData.SelfConsumption) Type="ChartSeriesType.SplineArea">
				</ChartSeries>
			</ChartSeriesCollection>
		</SfChart>
	</div>

	@*<div>
		<SfGrid DataSource="@PowerData" Height="200" Width="auto" EnableHover="false" EnableVirtualization="false" EnableColumnVirtualization="false">
			<GridPageSettings PageSize="80"></GridPageSettings>
			<GridColumns>
				<GridColumn Field=@nameof(Models.PowerData.Time) HeaderText="Time" Width="120"></GridColumn>
				<GridColumn Field=@nameof(Models.PowerData.Consumption) HeaderText="Consumption" TextAlign="TextAlign.Right" Width="150"></GridColumn>
				<GridColumn Field=@nameof(Models.PowerData.Production) HeaderText="Production" TextAlign="TextAlign.Right" Width="150"></GridColumn>
				<GridColumn Field=@nameof(Models.PowerData.FeedIn) HeaderText="FeedIn" TextAlign="TextAlign.Right" Width="150"></GridColumn>
				<GridColumn Field=@nameof(Models.PowerData.Purchased) HeaderText="Purchased" TextAlign="TextAlign.Right" Width="150"></GridColumn>
				<GridColumn Field=@nameof(Models.PowerData.SelfConsumption) HeaderText="Self Consumption" TextAlign="TextAlign.Right" Width="150"></GridColumn>
			</GridColumns>
		</SfGrid>
	</div>*@
}

@code {

	private readonly DateTime _siteStartDate = new DateTime(2020, 5, 9);
	private DateTime MaxEndDate => DateTime.Now.Date.AddDays(-1);                   // todo: make this site specific (local time)
	private IEnumerable<PowerData> PowerData { get; set; }
	private DateTime StartDate => ChartDateRange?.StartDate ?? _siteStartDate;     // ChartDateRange will be null until after the first load process
	private DateTime EndDate => ChartDateRange?.EndDate ?? MaxEndDate;

	public SfDateRangePicker ChartDateRange;

	//protected override async Task OnInitializedAsync()
	//{
	//		await LoadDateRange();

	//	var config = new KeyVaultConfiguration();
	//	var keyVault = new KeyVaultCache(config);

	//	try
	//	{
	//		var key = keyVault.GetSecret("solarview-function-key");
	//	}
	//	catch (Exception exception)
	//	{
	//		var msg = exception.Message;
	//	}
	//}

	private void ChartLoad(ILoadedEventArgs args)
	{
		args.Theme = ChartTheme.Bootstrap4;
	}

	private async Task OnDateRangeChanged()
	{
		await LoadDateRange();
	}

	private async Task LoadDateRange()
	{
		PowerData = await SolarViewService.CollectData(
			"1514817",
			StartDate,
			EndDate);
	}

}
