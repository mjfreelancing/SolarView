@page "/compare"
@attribute [Authorize]
@implements IDisposable
@using DateRange = SolarView.Common.Models.DateRange

<h1>Power Comparisons</h1>

<SiteView>
  <Loading>
    <LoadingView />
  </Loading>
  <SiteAvailable>
    <div class="mb-2">
      <SfAccordion ExpandMode="ExpandMode.Single">
        <AccordionItems>
          <AccordionItem Expanded="false">
            <HeaderTemplate>Add a new chart</HeaderTemplate>
            <ContentTemplate>
              <div class="p-2">
                @if (!_chartSelection.IsNullOrEmpty())
                {
                  @foreach (var selection in _chartSelection)
                  {
                    <SfCheckBox CssClass="mr-4" Label=@selection.ChartDescriptor.Description @bind-Checked="selection.Selected" />
                  }
                }
              </div>
              <hr />
              <ChartDateSelector MinDate="@SiteViewModel.CurrentSite.StartDate.ParseSolarDate()"
                                 MaxDate="@SiteViewModel.CurrentSite.LastRefreshDateTime.ParseSolarDateTime().AddDays(-1).Date"
                                 OnApplyDateRange="@(async dateRange => await ApplyDateRange(dateRange))" />
            </ContentTemplate>
          </AccordionItem>
        </AccordionItems>
      </SfAccordion>
    </div>

    @foreach (var descriptor in CompareViewModel.GetDescriptors())
    {
      var chartData = CompareViewModel.GetChartData(descriptor).AsReadOnlyList();

      <div class="mb-2">
        <SfAccordion ExpandMode="ExpandMode.Multiple">
          <AccordionItems>
            <AccordionItem Expanded="false">
              <HeaderTemplate>@descriptor.Description (@chartData.Count)</HeaderTemplate>
              <ContentTemplate>
                <ChartContainer ChartDescriptor="@descriptor" ChartData="@chartData" ChartDeleted="@OnChartDeleted" />
              </ContentTemplate>
            </AccordionItem>
          </AccordionItems>
        </SfAccordion>
      </div>
    }

  </SiteAvailable>
  <SiteNotAvailable>
    <p class="mt-4 mb-4">You should not have landed here, There's no data to display.</p>
    <a href="">You need to provide a Site Id</a>
  </SiteNotAvailable>
</SiteView>

@code {
  [Inject] private ISiteViewModel SiteViewModel { get; set; }
  [Inject] IEventAggregator EventAggregator { get; set; }
  //[Inject] private IChartDataCache ChartDataCache { get; set; }
  [Inject] private ICompareViewModel CompareViewModel { get; set; }

  // a list of possible charts the user can select
  private readonly IReadOnlyList<ChartSelection> _chartSelection = new List<ChartSelection>
  {
    new ChartSelection {Selected = true, ChartDescriptor = new ConsumptionChartDescriptor()},
    new ChartSelection {Selected = true, ChartDescriptor = new CostBenefitChartDescriptor()},
    new ChartSelection {Selected = true, ChartDescriptor = new FeedInChartDescriptor()}
  };

  public void Dispose()
  {
    EventAggregator.Unsubscribe<SiteChanged>(HandleSiteChanged);
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();

    EventAggregator.Subscribe<SiteChanged>(HandleSiteChanged);
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if (firstRender)
    {
      if (SiteViewModel.CurrentSite != null)
      {
        await LoadCharts();
      }

      StateHasChanged();
    }
  }

  private async Task HandleSiteChanged(SiteChanged message)
  {
    if (SiteViewModel.CurrentSite != null)
    {
      await LoadCharts();
    }

    StateHasChanged();
  }

  private /*async*/ Task LoadCharts()
  {
    return Task.CompletedTask;

    //_ = SiteViewModel.CurrentSite.WhenNotNull(nameof(SiteViewModel.CurrentSite));

    //var chartCount = await ChartDataCache.GetCount(SiteViewModel.CurrentSite.SiteId);

    //if (chartCount > 0)
    //{
    //  var allChartData = await ChartDataCache.GetData(SiteViewModel.CurrentSite.SiteId);

    //  foreach (var chartData in allChartData)
    //  {
    //    AddChartDescriptor(chartData);
    //  }

    //  StateHasChanged();
    //}
  }

  private async Task ApplyDateRange(DateRange dateRange)
  {
    var selectedCharts = _chartSelection.Where(item => item.Selected).Select(item => item.ChartDescriptor);

    var added = await CompareViewModel.AddCharts(dateRange, selectedCharts);

    if (added)
    {
      // Add the data to the cache
      //await ChartDataCache.Add(SiteViewModel.CurrentSite.SiteId, chartData);

      StateHasChanged();
    }
  }

  private async Task OnChartDeleted(string chartId)
  {
    await CompareViewModel.DeleteChart(chartId);

    // remove from the cache
    //await ChartDataCache.Remove(SiteViewModel.CurrentSite.SiteId, chartId);
  }
}
