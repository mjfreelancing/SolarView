@page "/compare"
@attribute [Authorize]
@implements IDisposable
@using DateRange = SolarView.Common.Models.DateRange

<h1>Power Comparisons</h1>

<SiteView>
  <Loading>
    <LoadingView />
  </Loading>
  <SiteAvailable>
    <div class="mb-2">
      <SfAccordion ExpandMode="ExpandMode.Single">
        <AccordionItems>
          <AccordionItem Expanded="false">
            <HeaderTemplate>Add a new chart</HeaderTemplate>
            <ContentTemplate>

              <div class="p-2">
                @if (!_chartSelection.IsNullOrEmpty())
                {
                  @foreach (var selection in _chartSelection)
                  {
                    <SfCheckBox CssClass="mr-4" Label=@selection.ChartDescriptor.Description @bind-Checked="selection.Selected" />
                  }
                }
              </div>

              <hr />

              <ChartDateSelector MinDate="@SiteViewModel.CurrentSite.StartDate.ParseSolarDate()"
                                 MaxDate="@SiteViewModel.CurrentSite.LastRefreshDateTime.ParseSolarDateTime().AddDays(-1).Date"
                                 OnApplyDateRange="@(async dateRange => await ApplyDateRange(dateRange))" />
            </ContentTemplate>
          </AccordionItem>
        </AccordionItems>
      </SfAccordion>
    </div>
    @if (!_chartDescriptorData.IsNullOrEmpty())
    {
      @foreach (var (descriptor, chartData) in _chartDescriptorData)
      {
        var readOnlyData = chartData as IReadOnlyList<ChartData>;

        <div class="mb-2">
          <SfAccordion ExpandMode="ExpandMode.Multiple">
            <AccordionItems>
              <AccordionItem Expanded="false">
                <HeaderTemplate>@descriptor.Description (@chartData.Count)</HeaderTemplate>
                <ContentTemplate>
                  <ChartContainer ChartDescriptor="@descriptor" ChartData="@readOnlyData" ChartDeleted="@OnChartDeleted" />
                </ContentTemplate>
              </AccordionItem>
            </AccordionItems>
          </SfAccordion>
        </div>
      }
    }
  </SiteAvailable>
  <SiteNotAvailable>
    <p class="mt-4 mb-4">You should not have landed here, There's no data to display.</p>
    <a href="">You need to provide a Site Id</a>
  </SiteNotAvailable>
</SiteView>

@code {
  [Inject] private ISiteViewModel SiteViewModel { get; set; }
  [Inject] IEventAggregator EventAggregator { get; set; }
  [Inject] private ISolarViewService SolarViewService { get; set; }
  [Inject] private IChartDataCache ChartDataCache { get; set; }

  private class ChartSelection
  {
    public bool Selected { get; set; }
    public IChartDescriptor ChartDescriptor { get; set; }
  }

  // a list of possible charts the user can select
  private readonly IReadOnlyList<ChartSelection> _chartSelection = new List<ChartSelection>
  {
    new ChartSelection {Selected = true, ChartDescriptor = new ConsumptionChartDescriptor()},
    new ChartSelection {Selected = true, ChartDescriptor = new CostBenefitChartDescriptor()},
    new ChartSelection {Selected = true, ChartDescriptor = new FeedInChartDescriptor()}
  };

  // each chart type created (by descriptor Id) mapped to the associated chart data (1..n)
  private readonly IDictionary<IChartDescriptor, IList<ChartData>> _chartDescriptorData = new Dictionary<IChartDescriptor, IList<ChartData>>();

  // each unique chart Id mapped to the associated chart descriptor (simplifies deletion of charts)
  private readonly IDictionary<string, IChartDescriptor> _chartDescriptors = new Dictionary<string, IChartDescriptor>();

  public void Dispose()
  {
    EventAggregator.Unsubscribe<SiteChanged>(HandleSiteChanged);
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();

    EventAggregator.Subscribe<SiteChanged>(HandleSiteChanged);
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if (firstRender)
    {
      if (SiteViewModel.CurrentSite != null)
      {
        await LoadCharts();
      }

      StateHasChanged();
    }
  }

  private async Task HandleSiteChanged(SiteChanged message)
  {
    if (SiteViewModel.CurrentSite != null)
    {
      await LoadCharts();
    }

    StateHasChanged();
  }

  private async Task LoadCharts()
  {
    _ = SiteViewModel.CurrentSite.WhenNotNull(nameof(SiteViewModel.CurrentSite));

    var chartCount = await ChartDataCache.GetCount(SiteViewModel.CurrentSite.SiteId);

    if (chartCount > 0)
    {
      var allChartData = await ChartDataCache.GetData(SiteViewModel.CurrentSite.SiteId);

      foreach (var chartData in allChartData)
      {
        AddChartDescriptor(chartData);
      }

      StateHasChanged();
    }
  }

  private async Task ApplyDateRange(DateRange dateRange)
  {
    var startDate = dateRange.StartDateTime;
    var endDate = dateRange.EndDateTime;

    var powerData = (await SolarViewService.CollectData(SiteViewModel.CurrentSite.SiteId, startDate, endDate)).AsReadOnlyList();

    var selectedCharts = _chartSelection.Where(item => item.Selected);

    foreach (var selection in selectedCharts)
    {
      var chartData = new ChartData
      {
        Id = $"{Guid.NewGuid()}",
        DescriptorId = selection.ChartDescriptor.Id,
        StartDate = startDate,
        EndDate = endDate,
        Power = powerData
      };

      // add to the list of charts to be rendered
      AddChartDescriptor(chartData);

      // Add the data to the cache
      await ChartDataCache.Add(SiteViewModel.CurrentSite.SiteId, chartData);
    }

    StateHasChanged();
  }

  private void AddChartDescriptor(ChartData chartData)
  {
    // determine if any of the existing charts are of the same required type
    var chartDescriptor = _chartDescriptorData.Keys.SingleOrDefault(item => item.Id == chartData.DescriptorId);

    if (chartDescriptor == null)
    {
      chartDescriptor = _chartSelection
        .Single(item => item.ChartDescriptor.Id == chartData.DescriptorId)
        .ChartDescriptor;

      _chartDescriptorData.Add(chartDescriptor, new List<ChartData>());
    }

    // track the data associated with the required chart descriptor
    _chartDescriptorData[chartDescriptor].Add(chartData);

    // map the chart Id to its' descriptor (to simplify deleting charts)
    _chartDescriptors.Add(chartData.Id, chartDescriptor);
  }

  private async Task OnChartDeleted(string chartId)
  {
    var chartDescriptor = _chartDescriptors[chartId];                 // the chart descriptor associated with this chart
    var descriptorChartData = _chartDescriptorData[chartDescriptor];  // ALL chart data associated with the same chart type

    var chartData = descriptorChartData.Single(item => item.Id == chartId);
    descriptorChartData.Remove(chartData);

    if (descriptorChartData.Count == 0)
    {
      _chartDescriptorData.Remove(chartDescriptor);
    }

    // remove from the cache
    await ChartDataCache.Remove(SiteViewModel.CurrentSite.SiteId, chartId);
  }
}
