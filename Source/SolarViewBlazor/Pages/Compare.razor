@page "/compare"
@attribute [Authorize]
@implements IDisposable
@using DateRange = SolarView.Common.Models.DateRange

<h1>Power Comparisons</h1>

<SiteView>
  <Loading>
    <LoadingView />
  </Loading>
  <SiteAvailable>
    <div class="mb-2">
      <ChartDateSelector MinDate="@SiteViewModel.CurrentSite.StartDate.ParseSolarDate()"
                         MaxDate="@SiteViewModel.CurrentSite.LastRefreshDateTime.ParseSolarDateTime().AddDays(-1).Date"
                         OnApplyDateRange="@(async dateRange => await ApplyDateRange(dateRange))" />
    </div>
    @if (_chartDescriptorData != null)
    {
      @foreach (var descriptor in _chartDescriptorData.Keys)
      {
        var chartData = _chartDescriptorData[descriptor] as IReadOnlyList<ChartData>;

        <div class="mb-2">
          <SfAccordion ExpandMode="ExpandMode.Single">
            <AccordionItems>
              <AccordionItem Expanded="false">
                <HeaderTemplate>@descriptor.Description</HeaderTemplate>
                <ContentTemplate>
                  <ChartContainer ChartDescriptor="@descriptor" ChartData="@chartData" ChartDeleted="@OnChartDeleted" />
                </ContentTemplate>
              </AccordionItem>
            </AccordionItems>
          </SfAccordion>
        </div>
      }
    }
  </SiteAvailable>
  <SiteNotAvailable>
    <p class="mt-4 mb-4">You should not have landed here, There's no data to display.</p>
    <a href="">You need to provide a Site Id</a>
  </SiteNotAvailable>
</SiteView>

@code {
  [Inject] private ISiteViewModel SiteViewModel { get; set; }
  [Inject] IEventAggregator EventAggregator { get; set; }
  [Inject] private ISolarViewService SolarViewService { get; set; }
  [Inject] private IChartDataCache ChartDataCache { get; set; }

  // a registry of known charts that can be added
  private readonly IDictionary<string, Func<IChartDescriptor>> _chartDescriptorFactory = new Dictionary<string, Func<IChartDescriptor>>
  {
    {nameof(AverageWattsChartDescriptor), () => new AverageWattsChartDescriptor()}
  };

  // a mapping of chart data associated with each chart type
  private readonly IDictionary<IChartDescriptor, IList<ChartData>> _chartDescriptorData = new Dictionary<IChartDescriptor, IList<ChartData>>();

  // a mapping of chart data to the associated chart type (simplifies deletion of charts)
  private readonly IDictionary<string, IChartDescriptor> _chartDataDescriptors = new Dictionary<string, IChartDescriptor>();

  public void Dispose()
  {
    EventAggregator.Unsubscribe<SiteChanged>(HandleSiteChanged);
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();

    EventAggregator.Subscribe<SiteChanged>(HandleSiteChanged);
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if (firstRender)
    {
      if (SiteViewModel.CurrentSite != null)
      {
        await LoadCharts();
      }

      StateHasChanged();
    }
  }

  private async Task HandleSiteChanged(SiteChanged message)
  {
    if (SiteViewModel.CurrentSite != null)
    {
      await LoadCharts();
    }

    StateHasChanged();
  }

  private async Task LoadCharts()
  {
    _ = SiteViewModel.CurrentSite.WhenNotNull(nameof(SiteViewModel.CurrentSite));

    var chartCount = await ChartDataCache.GetCount(SiteViewModel.CurrentSite.SiteId);

    if (chartCount > 0)
    {
      var allChartData = await ChartDataCache.GetData(SiteViewModel.CurrentSite.SiteId);

      foreach (var chartData in allChartData)
      {
        AddChartReference(chartData);
      }

      StateHasChanged();
    }
  }

  private async Task ApplyDateRange(DateRange dateRange)
  {
    var startDate = dateRange.StartDateTime;
    var endDate = dateRange.EndDateTime;

    var powerData = (await SolarViewService.CollectData(SiteViewModel.CurrentSite.SiteId, startDate, endDate)).AsReadOnlyList();

    var chartData = new ChartData
    {
      Id = $"{Guid.NewGuid()}",
      DescriptorId = nameof(AverageWattsChartDescriptor),
      StartDate = startDate,
      EndDate = endDate,
      Power = powerData
    };

    await ChartDataCache.Add(SiteViewModel.CurrentSite.SiteId, chartData);

    AddChartReference(chartData);

    StateHasChanged();
  }

  private void AddChartReference(ChartData chartData)
  {
    var chartDescriptor = _chartDescriptorData.Keys.SingleOrDefault(item => item.Id == chartData.DescriptorId);

    if (chartDescriptor == null)
    {
      if (!_chartDescriptorFactory.TryGetValue(chartData.DescriptorId, out var descriptorFactory))
      {
        throw new InvalidOperationException($"Unknown descriptor Id '{chartData.DescriptorId}'");
      }

      chartDescriptor = descriptorFactory.Invoke();

      _chartDescriptorData.Add(chartDescriptor, new List<ChartData>());
    }

    var chartReferences = _chartDescriptorData[chartDescriptor];
    chartReferences.Add(chartData);

    _chartDataDescriptors.Add(chartData.Id, chartDescriptor);
  }

  private async Task OnChartDeleted(string chartId)
  {
    var chartDescriptor = _chartDataDescriptors[chartId];             // the chart descriptor associated with this chart
    var chartReferences = _chartDescriptorData[chartDescriptor];      // ALL chart data associated with the same chart type

    var chartData = chartReferences.Single(item => item.Id == chartId);
    chartReferences.Remove(chartData);

    if (chartReferences.Count == 0)
    {
      _chartDescriptorData.Remove(chartDescriptor);
    }

    // update the cache
    await ChartDataCache.Remove(SiteViewModel.CurrentSite.SiteId, chartId);
  }
}
