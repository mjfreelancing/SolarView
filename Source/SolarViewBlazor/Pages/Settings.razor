@page "/settings"
@using Components.Settings
@using SiteDetails = SolarViewBlazor.Components.Settings.SiteDetails
@attribute [Authorize]
@implements IDisposable

<h1>Settings</h1>

<SiteView>
  <Loading>
    <LoadingView />
  </Loading>
  <SiteAvailable>
    <div class="mb-4">
      <SfAccordion ExpandMode="ExpandMode.Single">
        <AccordionItems>
          @foreach (var (title, fragmentType) in _fragmentTypes)
          {
            var expanded = fragmentType == typeof(SiteDetails);

            <AccordionItem Expanded="@expanded">
              <HeaderTemplate>@title</HeaderTemplate>
              <ContentTemplate>
                <DynamicComponent CssClass="content border border-primary settings-card" ComponentType="@fragmentType"/>
              </ContentTemplate>
            </AccordionItem>
          }
        </AccordionItems>
      </SfAccordion>
      <button class="btn btn-outline-primary btn-width-medium mt-4 mr-2" @onclick="ClearLocalStorage">Clear Cache</button>
    </div>
  </SiteAvailable>
  <SiteNotAvailable>
    <p class="mt-4 mb-4">You should not have landed here, There's no data to display.</p>
    <a href="">You need to provide a Site Id</a>
  </SiteNotAvailable>
</SiteView>

@code {
  [Inject] private ISiteViewModel SiteViewModel { get; set; }
  [Inject] IEventAggregator EventAggregator { get; set; }
  [Inject] IChartDataCache ChartDataCache { get; set; }
  [Inject] private NavigationManager NavigationManager { get; set; }

  private readonly IDictionary<string, Type> _fragmentTypes = new Dictionary<string, Type>
  {
    {"Site Details", typeof(SiteDetails)},
    {"User Details", typeof(UserDetails)},
    {"Energy Costs", typeof(SiteEnergyCosts)}
  };

  public void Dispose()
  {
    EventAggregator.Unsubscribe<SiteChanged>(HandleSiteChanged);
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();

    EventAggregator.Subscribe<SiteChanged>(HandleSiteChanged);
  }

  private void HandleSiteChanged(SiteChanged message)
  {
    StateHasChanged();
  }

  private async Task ClearLocalStorage()
  {
    await ChartDataCache.ClearAsync(SiteViewModel.CurrentSite.SiteId);
    await SiteViewModel.ForgetSiteAsync();

    // go back to the home page so the user can connect to a new site
    NavigationManager.NavigateTo("/");
  }
}