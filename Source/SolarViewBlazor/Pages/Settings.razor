@page "/settings"
@attribute [Authorize]
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject IChartDataCache ChartDataCache
@inject IAppState AppState

<h3>Settings</h3>

<table class="table table-bordered">
  <tbody>
    <tr>
      <td>User Name</td>
      <td>@UserPrincipleName</td>
    </tr>

    <tr>
      <td>Site Id</td>
      @if (AppState.CurrentSite == null)
      {
        <td><a href="">You need to provide a Site Id</a></td>
      }
      else
      {
        <td>@AppState.CurrentSite.SiteId</td>
      }
    </tr>

    <tr>
      <td>Cached Charts</td>
      @switch (CachedChartItemCount)
      {
        case 0:
          <td>There are no charts</td>
          break;

        case 1:
          <td>@CachedChartItemCount chart</td>
          break;

        default:
          <td>@CachedChartItemCount charts</td>
          break;
      }
    </tr>
  </tbody>
</table>

<table class="table table-borderless">
  <tbody>
    <tr>
      <td>
        @if (AppState.CurrentSite != null)
        {
          <button class="btn btn-primary" @onclick="ClearLocalStorage">Clear Cache</button>
        }

        <a class="btn btn-primary" href="@SignOutUrl">Sign Out</a>
      </td>
    </tr>
  </tbody>
</table>

@code {
  // provided by AuthorizeRouteView in App.razor
  // See also: https://docs.microsoft.com/en-us/aspnet/core/blazor/security/?view=aspnetcore-3.1#procedural-logic
  [CascadingParameter]
  private Task<AuthenticationState> AuthenticationStateTask { get; set; }

  // bindings
  private int CachedChartItemCount { get; set; }
  private string UserPrincipleName { get; set; }

  private const string SignOutUrl = "AzureAD/Account/SignOut";

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      var user = (await AuthenticationStateTask).User;
      UserPrincipleName = user.Claims.SingleOrDefault(item => item.Type == ClaimTypes.Upn)?.Value;

      if (AppState.CurrentSite != null)
      {
        CachedChartItemCount = await ChartDataCache.GetCount(AppState.CurrentSite.SiteId);
        StateHasChanged();
      }
    }
  }

  private async Task ClearLocalStorage()
  {
    await LocalStorage.ClearAsync();

    AppState.CurrentSite = null;
    CachedChartItemCount = 0;

    StateHasChanged();
  }
}