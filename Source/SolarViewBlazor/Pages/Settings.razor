@page "/settings"

@attribute [Authorize]
@implements IDisposable

<h1>Settings</h1>

<LoadedView IsLoaded="@_isLoaded">
  <Loading>
    <!--  prevent flickering if coming back to this page after the data has been loaded for the session -->
    @if (SiteViewModel.CurrentSite == null)
    {
      <LoadingView/>
    }
  </Loading>
  <Loaded>
    <div class="mb-4">
      <div class="content border border-primary settings-card mt-4">
        <UserInfo/>
      </div>

      @if (CurrentSite != null)
      {
        <div class="content border border-primary settings-card mt-4">
          <SiteInfo Site="@CurrentSite"/>
        </div>

        <button class="btn btn-outline-primary btn-width-medium mt-4 mr-2" @onclick="ClearLocalStorage">Clear Cache</button>
      }
    </div>
  </Loaded>
</LoadedView>

@code {
  [Inject] private ISiteViewModel SiteViewModel { get; set; }
  [Inject] IEventAggregator EventAggregator { get; set; }
  [Inject] ILocalStorageService LocalStorage { get; set; }
  [Inject] private NavigationManager NavigationManager { get; set; }

  // bindings
  private bool _isLoaded;

  private ISiteInfo CurrentSite => SiteViewModel.CurrentSite;

  protected override void OnInitialized()
  {
    EventAggregator.Subscribe<SiteChanged>(HandleSiteChanged);
  }

  public void Dispose()
  {
    EventAggregator.Unsubscribe<SiteChanged>(HandleSiteChanged);
  }

  private void HandleSiteChanged(SiteChanged message)
  {
    StateHasChanged();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      // will be null on first load or during a page refresh
      if (CurrentSite == null)
      {
        // loads from local storage - refreshes the data if previously cached
        // also publishes a SiteChanged event
        await SiteViewModel.LoadCurrentSite(true);
      }

      _isLoaded = true;
      StateHasChanged();
    }
  }

  private async Task ClearLocalStorage()
  {
    await LocalStorage.ClearAsync();
    await SiteViewModel.ForgetSite();
    
    // go back to the home page so the user can connect to a new site
    NavigationManager.NavigateTo("/");
  }
}