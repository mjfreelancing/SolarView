@using SolarViewBlazor.Charts.Models
@using SolarViewBlazor.Charts.ViewModels

<div class="p-2 d-flex align-items-center">
  <SfCheckBox Label="Cumulative" @bind-Checked="@_isCumulative" TChecked="bool" ValueChange="CalculateChartData" />
  <div class="ml-4" style="width: 120px">
    <SfDropDownList TValue="PowerUnit" TItem="DisplayPowerUnit" Placeholder="Units" PopupHeight="100" Value="@_powerUnit"
                    DataSource="@_displayPowerUnits">
      <DropDownListFieldSettings Value="@nameof(DisplayPowerUnit.Id)" Text="@nameof(DisplayPowerUnit.Text)" />
      <DropDownListEvents TValue="PowerUnit" ValueChange="OnUnitChange" />
    </SfDropDownList>
  </div>
</div>
<div>
  <SfChart>
    <ChartArea>
      <ChartAreaBorder Width="1" />
    </ChartArea>

    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" LabelFormat="{value}"
                       IntervalType="IntervalType.Auto" EdgeLabelPlacement="EdgeLabelPlacement.Shift" />

    <ChartPrimaryYAxis LabelFormat="@YAxisLabel" />

    <ChartTooltipSettings Enable="true" />

    <ChartSeriesCollection>
      <ChartSeries DataSource=@_timeFeedIn Type="ChartSeriesType.Line" Width="2" Fill="#006400"
                   XName=@nameof(TimeFeedIn.Time) YName=@nameof(TimeFeedIn.FeedIn) />
    </ChartSeriesCollection>
    <ChartLegendSettings Visible="false" />
  </SfChart>
</div>

@code {
  [Inject] private IFeedInChartViewModel FeedInViewModel { get; set; }

  [Parameter] public ChartData ChartData { get; set; }

  private readonly IReadOnlyList<DisplayPowerUnit> _displayPowerUnits = ChartHelpers.GetDisplayPowerUnits();

  private bool _isCumulative = false;
  private PowerUnit _powerUnit = PowerUnit.WattHour;
  private string YAxisLabel => ChartHelpers.GetYAxisLabel(_powerUnit, _isCumulative);
  private IReadOnlyList<TimeFeedIn> _timeFeedIn;

  protected override void OnInitialized()
  {
    base.OnInitialized();
    CalculateChartData();
  }

  private void CalculateChartData()
  {
    _timeFeedIn = FeedInViewModel.CalculateData(ChartData.Power, _powerUnit, _isCumulative);
  }

  private void OnUnitChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<PowerUnit> args)
  {
    _powerUnit = args.Value;
    CalculateChartData();
  }
}
