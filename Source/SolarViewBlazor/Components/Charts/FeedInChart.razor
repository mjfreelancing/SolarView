<div class="d-flex">
  <button class="ml-auto" @onclick="DeleteChart">Remove</button>
</div>
<div>
  <SfChart Title=@($"Period: {ChartData.StartDate:yyyy-MM-dd} to {ChartData.EndDate:yyyy-MM-dd}")>
    <ChartArea>
      <ChartAreaBorder Width="1" />
    </ChartArea>

    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" LabelFormat="{value}"
                       IntervalType="IntervalType.Auto" EdgeLabelPlacement="EdgeLabelPlacement.Shift" />

    <ChartPrimaryYAxis LabelFormat="{value}W" Minimum=@_minFeedIn Maximum=@_maxFeedIn Interval="500" />

    <ChartTooltipSettings Enable="true" />

    <ChartSeriesCollection>
      <ChartSeries DataSource=@_timeFeedIn Type="ChartSeriesType.Line" Width="2" Fill="#006400"
                   XName=@nameof(TimeFeedIn.Time) YName=@nameof(TimeFeedIn.FeedIn) />
    </ChartSeriesCollection>
  </SfChart>
</div>

@code {

  [CascadingParameter] public ChartContainer Parent { get; set; }
  [Parameter] public ChartData ChartData { get; set; }

  private class TimeFeedIn
  {
    public string Time { get; }
    public double FeedIn { get; }

    public TimeFeedIn(string time, double feedIn)
    {
      Time = time;
      FeedIn = feedIn;
    }
  }

  private double _minFeedIn;
  private double _maxFeedIn;
  private IReadOnlyList<TimeFeedIn> _timeFeedIn;

  protected override void OnParametersSet()
  {
    base.OnParametersSet();

    if (Parent == null)
    {
      throw new InvalidOperationException($"The {nameof(Parent)} parameter must be initialized");
    }

    if (ChartData?.Power == null)
    {
      throw new InvalidOperationException($"The {nameof(ChartData)} parameter must be initialized with power data");
    }

    _timeFeedIn = ChartData.Power
      .Select(item => new TimeFeedIn(item.Time, item.Watts.FeedIn))
      .AsReadOnlyList();

    CalculateChartLimits();
  }

  private void CalculateChartLimits()
  {
    //var powerData = ChartData.Power;

    var minFeedIn = _timeFeedIn.Min(item => item.FeedIn);
    var maxFeedIn = _timeFeedIn.Max(item => item.FeedIn);

    _minFeedIn = Math.Floor(minFeedIn / 500d) * 500d;              // intervals of 0.2 on chart
    _maxFeedIn = (1 + Math.Floor(maxFeedIn / 500d)) * 500d;          // intervals of 0.2 on chart
  }

  private async Task DeleteChart()
  {
    await Parent.DeleteChart(ChartData.Id);
  }
}
