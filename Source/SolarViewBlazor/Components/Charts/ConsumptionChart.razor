@using SolarView.Client.Common.Helpers

<div class="p-2 d-flex align-items-center">
  <SfCheckBox Label="Cumulative" @bind-Checked="@_cumulativeMode" @onchange="CalculateChartData" />
  <div class="ml-4" style="width: 120px">
    <SfDropDownList TValue="PowerUnit" TItem="DisplayPowerUnit" Placeholder="Units" PopupHeight="100" Value="@_selectedUnit"
                    DataSource="@_displayPowerUnits">
      <DropDownListFieldSettings Value="@nameof(DisplayPowerUnit.Id)" Text="@nameof(DisplayPowerUnit.Text)" />
      <DropDownListEvents TValue="PowerUnit" ValueChange="OnUnitChange" />
    </SfDropDownList>
  </div>
  <button class="ml-auto" @onclick="DeleteChart">Remove</button>
</div>
<div>
  <SfChart Title=@($"Period: {ChartData.StartDate:yyyy-MM-dd} to {ChartData.EndDate:yyyy-MM-dd}")>

    @*<ChartZoomSettings EnableMouseWheelZooming="true" EnablePinchZooming="true" EnableSelectionZooming="true"/>*@

    <ChartArea>
      <ChartAreaBorder Width="1" />
    </ChartArea>

    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" LabelFormat="{value}"
                       IntervalType="IntervalType.Auto" EdgeLabelPlacement="EdgeLabelPlacement.Shift" />
    
    <ChartPrimaryYAxis LabelFormat="@_axisFormat" Minimum="0" />

    <ChartTooltipSettings Enable="true" />

    <ChartSeriesCollection>
      @*red*@
      <ChartSeries DataSource=@_timeWatts Opacity="0.8" Fill="#d12e2e" Name="Consumption"
                   XName=@nameof(PowerData.Time) YName=@nameof(TimeWatts.Consumption) Type="ChartSeriesType.SplineArea">
      </ChartSeries>

      @*green*@
      <ChartSeries DataSource=@_timeWatts Opacity="0.8" Fill="#2bab4d" Name="Production"
                   XName=@nameof(PowerData.Time) YName=@nameof(TimeWatts.Production) Type="ChartSeriesType.SplineArea">
      </ChartSeries>

      @*blue*@
      <ChartSeries DataSource=@_timeWatts Opacity="0.6" Fill="#316bde" Name="Self Consumption"
                   XName=@nameof(PowerData.Time) YName=@nameof(TimeWatts.SelfConsumption) Type="ChartSeriesType.SplineArea">
      </ChartSeries>
    </ChartSeriesCollection>
    <ChartLegendSettings Visible="true" />
  </SfChart>
</div>

@code {

  [CascadingParameter] public ChartContainer Parent { get; set; }
  [Parameter] public ChartData ChartData { get; set; }

  private class TimeWatts
  {
    public string Time { get; }
    public double Consumption { get; set; }
    public double Production { get; set; }
    public double FeedIn { get; set; }
    public double Purchased { get; set; }
    public double SelfConsumption { get; set; }

    public TimeWatts(string time, WattsData watts)
    {
      Time = time;
      Consumption = watts.Consumption;
      Production = watts.Production;
      FeedIn = watts.FeedIn;
      Purchased = watts.Purchased;
      SelfConsumption = watts.SelfConsumption;
    }
  }

  private readonly IList<DisplayPowerUnit> _displayPowerUnits = new List<DisplayPowerUnit>
  {
    new DisplayPowerUnit(PowerUnit.Watts, "Watts"),
    new DisplayPowerUnit(PowerUnit.WattHour, "Watt-Hour"),
  };

  private bool _cumulativeMode;
  private PowerUnit _selectedUnit = PowerUnit.WattHour;
  private string _axisFormat => GetAxisFormat();
  private IReadOnlyList<TimeWatts> _timeWatts;

  protected override void OnInitialized()
  {
    base.OnInitialized();
    CalculateChartData();
  }

  private void CalculateChartData()
  {
    if (_cumulativeMode)
    {
      var lastWattsItem = new WattsData();

      _timeWatts = ChartData.Power
        .Select(powerData =>
        {
          // displaying in KW / KWh when aggregating
          var scaledData = _selectedUnit == PowerUnit.Watts
            ? WattsDataHelpers.Scale(powerData.Watts, 0.001d)
            : WattsDataHelpers.Scale(powerData.WattHour, 0.001d);

          lastWattsItem = WattsDataHelpers.Aggregate(lastWattsItem, scaledData);

          return new TimeWatts(powerData.Time, lastWattsItem);
        })
        .AsReadOnlyList();
    }
    else
    {
      _timeWatts = ChartData.Power
        .Select(item =>
        {
          var wattData = _selectedUnit == PowerUnit.Watts
            ? item.Watts
            : item.WattHour;

          return new TimeWatts(item.Time, wattData);
        })
        .AsReadOnlyList();
    }
  }

  private string GetAxisFormat()
  {
    return (_selectedUnit, _cumulativeMode) switch
    {
      (PowerUnit.Watts, true) => "{value}KW",
      (PowerUnit.Watts, false) => "{value}W",
      (PowerUnit.WattHour, true) => "{value}KWh",
      (PowerUnit.WattHour, false) => "{value}Wh",
      (_, _) => throw new InvalidOperationException($"Unknown Unit/Mode combination: {_selectedUnit}/{_cumulativeMode}")
    };
  }

  private async Task DeleteChart()
  {
    await Parent.DeleteChart(ChartData.Id);
  }

  private void OnUnitChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<PowerUnit> args)
  {
    _selectedUnit = args.Value;
    CalculateChartData();
  }
}
