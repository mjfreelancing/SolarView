<div class="d-flex">
  <button class="ml-auto" @onclick="DeleteChart">Remove</button>
</div>
<div>
  <SfChart Title=@($"Period: {ChartData.StartDate:yyyy-MM-dd} to {ChartData.EndDate:yyyy-MM-dd}")>

    @*<ChartZoomSettings EnableMouseWheelZooming="true" EnablePinchZooming="true" EnableSelectionZooming="true"/>*@

    <ChartArea>
      <ChartAreaBorder Width="1" />
    </ChartArea>

    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" LabelFormat="{value}"
                       IntervalType="IntervalType.Auto" EdgeLabelPlacement="EdgeLabelPlacement.Shift" />

    <ChartPrimaryYAxis LabelFormat="{value}W" Minimum="0" Maximum=@_maxWatts Interval="500" />

    <ChartTooltipSettings Enable="true" />

    <ChartSeriesCollection>
      @*red*@
      <ChartSeries DataSource=@ChartData.Power Opacity="0.8" Fill="#d12e2e"
                   Name=@nameof(PowerData.Consumption) XName=@nameof(PowerData.Time)
                   YName=@nameof(PowerData.Consumption) Type="ChartSeriesType.SplineArea">
      </ChartSeries>

      @*green*@
      <ChartSeries DataSource=@ChartData.Power Opacity="0.8" Fill="#2bab4d"
                   Name=@nameof(PowerData.Production) XName=@nameof(PowerData.Time)
                   YName=@nameof(PowerData.Production) Type="ChartSeriesType.SplineArea">
      </ChartSeries>

      @*blue*@
      <ChartSeries DataSource=@ChartData.Power Opacity="0.6" Fill="#316bde"
                   Name=@nameof(PowerData.SelfConsumption) XName=@nameof(PowerData.Time)
                   YName=@nameof(PowerData.SelfConsumption) Type="ChartSeriesType.SplineArea">
      </ChartSeries>
    </ChartSeriesCollection>
  </SfChart>
</div>

@code {

  [CascadingParameter] public ChartContainer Parent { get; set; }
  [Parameter] public ChartData ChartData { get; set; }

  private double _maxWatts;

  protected override void OnParametersSet()
  {
    base.OnParametersSet();

    if (Parent == null)
    {
      throw new InvalidOperationException($"The {nameof(Parent)} parameter must be initialized");
    }

    if (ChartData?.Power == null)
    {
      throw new InvalidOperationException($"The {nameof(ChartData)} parameter must be initialized with power data");
    }

    CalculateChartLimits();
  }

  private void CalculateChartLimits()
  {
    var powerData = ChartData.Power;

    var maxWatts = powerData
      .SelectMany(item => new[] { item.Consumption, item.Purchased, item.SelfConsumption, item.FeedIn, item.Production })
      .Max();

    _maxWatts = (1 + Math.Floor(maxWatts / 500d)) * 500d;        // intervals of 500 on chart
  }

  private async Task DeleteChart()
  {
    await Parent.DeleteChart(ChartData.Id);
  }
}
