@using SolarViewBlazor.Charts.Models
@using SolarViewBlazor.Charts.ViewModels

<div class="p-2 d-flex">
  <SfCheckBox Label="Cumulative" @bind-Checked="@_isCumulative" TChecked="bool" ValueChange="CalculateChartData" />
</div>
<div>
  <SfChart>
    <ChartArea>
      <ChartAreaBorder Width="1" />
    </ChartArea>

    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" LabelFormat="{value}"
                       IntervalType="IntervalType.Auto" EdgeLabelPlacement="EdgeLabelPlacement.Shift" />

    <ChartPrimaryYAxis LabelFormat="c" />

    <ChartTooltipSettings Enable="true" />

    <ChartSeriesCollection>
      <ChartSeries DataSource=@_costData Name="Without Solar" Type="ChartSeriesType.Line" Width="2" Fill="#640000"
                   XName=@nameof(PowerCost.Time) YName=@nameof(PowerCost.WithoutSolarCost) />

      <ChartSeries DataSource=@_costData Name="With Solar" Type="ChartSeriesType.Line" Width="2" Fill="#006400"
                   XName=@nameof(PowerCost.Time) YName=@nameof(PowerCost.WithSolarCost) />

      <ChartSeries DataSource=@_costData Name="Saving" Type="ChartSeriesType.Line" Width="2" Fill="#ff6400"
                   XName=@nameof(PowerCost.Time) YName=@nameof(PowerCost.Saving) />
    </ChartSeriesCollection>
    <ChartLegendSettings Visible="true" />
  </SfChart>
</div>

@code {
  [Inject] private ICostBenefitChartViewModel CostBenefitViewModel { get; set; }

  [Parameter] public ChartData ChartData { get; set; }

  private bool _isCumulative = true;
  private IReadOnlyList<PowerCost> _costData;

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();

    await CalculateChartData();
  }

  private async Task CalculateChartData()
  {
    _costData = await CostBenefitViewModel.CalculateData(ChartData.Power, _isCumulative);
  }
}
