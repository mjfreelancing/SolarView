@using SolarView.Client.Common.Helpers
<div class="p-2 d-flex">
  <SfCheckBox Label="Cumulative" @bind-Checked="@_cumulativeMode" @onchange="CalculateChartData" />
  <button class="ml-auto" @onclick="DeleteChart">Remove</button>
</div>
<div>
  <SfChart Title=@($"Period: {ChartData.StartDate:yyyy-MM-dd} to {ChartData.EndDate:yyyy-MM-dd}")>
    <ChartArea>
      <ChartAreaBorder Width="1" />
    </ChartArea>

    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" LabelFormat="{value}"
                       IntervalType="IntervalType.Auto" EdgeLabelPlacement="EdgeLabelPlacement.Shift" />

    <ChartPrimaryYAxis LabelFormat="c" />

    <ChartTooltipSettings Enable="true" />

    <ChartSeriesCollection>
      <ChartSeries DataSource=@_costData Name="Without Solar" Type="ChartSeriesType.Line" Width="2" Fill="#640000"
                   XName=@nameof(PowerCost.Time) YName=@nameof(PowerCost.WithoutSolarCost) />

      <ChartSeries DataSource=@_costData Name="With Solar" Type="ChartSeriesType.Line" Width="2" Fill="#006400"
                   XName=@nameof(PowerCost.Time) YName=@nameof(PowerCost.WithSolarCost) />
    </ChartSeriesCollection>
    <ChartLegendSettings Visible="true" />
  </SfChart>
</div>

@code {

  [CascadingParameter] public ChartContainer Parent { get; set; }
  [Parameter] public ChartData ChartData { get; set; }

  private class PowerCost
  {
    private double PurchaseCostPerW = 0.3283379d / 1000.0d;
    private double FeedInCostPerW = 0.105d / 1000.0d;
    private double FixedCostPerQuarterHour = 0.99d / 24.0d / 4.0d;

    public string Time { get; }
    public double WithSolarCost { get; }
    public double WithoutSolarCost { get; }

    public PowerCost(PowerData powerData)
    {
      Time = powerData.Time;
      WithSolarCost = FixedCostPerQuarterHour + (powerData.WattHour.Purchased * PurchaseCostPerW - powerData.WattHour.FeedIn * FeedInCostPerW);
      WithoutSolarCost = FixedCostPerQuarterHour + ((powerData.WattHour.Purchased + powerData.WattHour.SelfConsumption) * PurchaseCostPerW);
    }
  }

  private bool _cumulativeMode;
  private IReadOnlyList<PowerCost> _costData;

  protected override void OnInitialized()
  {
    base.OnInitialized();
    CalculateChartData();
  }

  private void CalculateChartData()
  {
    if (_cumulativeMode)
    {
      var lastPowerItem = new PowerData { WattHour = new WattsData() };

      _costData = ChartData.Power
        .Select(powerData =>
        {
          lastPowerItem.Time = powerData.Time;
          lastPowerItem.WattHour = WattsDataHelpers.Aggregate(lastPowerItem.WattHour, powerData.WattHour);

          return new PowerCost(lastPowerItem);
        })
        .AsReadOnlyList();
    }
    else
    {
      _costData = ChartData.Power
        .Select(item => new PowerCost(item))
        .AsReadOnlyList();
    }
  }

  private async Task DeleteChart()
  {
    await Parent.DeleteChart(ChartData.Id);
  }
}
