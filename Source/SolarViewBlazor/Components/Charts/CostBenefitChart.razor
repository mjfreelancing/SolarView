<div class="d-flex">
  <button class="ml-auto" @onclick="DeleteChart">Remove</button>
</div>
<div>
  <SfChart Title=@($"Period: {ChartData.StartDate:yyyy-MM-dd} to {ChartData.EndDate:yyyy-MM-dd}")>
    <ChartArea>
      <ChartAreaBorder Width="1" />
    </ChartArea>

    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" LabelFormat="{value}"
                       IntervalType="IntervalType.Auto" EdgeLabelPlacement="EdgeLabelPlacement.Shift"/>

    <ChartPrimaryYAxis Minimum=@MinCost Maximum=@MaxCost Interval="0.2" LabelFormat="c" />

    <ChartTooltipSettings Enable="true" />

    <ChartSeriesCollection>
      <ChartSeries DataSource=@ChartData.Power Type="ChartSeriesType.Line" Width="2" Fill="#006400"
                   XName=@nameof(PowerData.Time) YName=@nameof(PowerData.AdjustedCost) />

      <ChartSeries DataSource=@ChartData.Power Type="ChartSeriesType.Line" Width="2" Fill="#640000"
                   XName=@nameof(PowerData.Time) YName=@nameof(PowerData.NoSolarCost) />
    </ChartSeriesCollection>
  </SfChart>
</div>

@code {

  [CascadingParameter] public ChartContainer Parent { get; set; }
  [Parameter] public ChartData ChartData { get; set; }

  private double MinCost { get; set; }
  private double MaxCost { get; set; }

  protected override void OnParametersSet()
  {
    base.OnParametersSet();

    if (Parent == null)
    {
      throw new InvalidOperationException($"The {nameof(Parent)} parameter must be initialized");
    }

    if (ChartData?.Power == null)
    {
      throw new InvalidOperationException($"The {nameof(ChartData)} parameter must be initialized with power data");
    }

    CalculateChartLimits();
  }

  private void CalculateChartLimits()
  {
    var powerData = ChartData.Power;

    var minCost = powerData.Min(item => item.AdjustedCost);
    var maxCost = powerData.Max(item => item.NoSolarCost);

    if (minCost > 0.0d)
    {
      MinCost = Math.Floor(minCost / 0.2d) * 0.2d;              // intervals of 0.2 on chart
    }
    else
    {
      MinCost = -(1 + Math.Floor(-minCost / 0.2d)) * 0.2d;      // intervals of 0.2 on chart
    }

    MaxCost = (1 + Math.Floor(maxCost / 0.2d)) * 0.2d;          // intervals of 0.2 on chart
  }

  private async Task DeleteChart()
  {
    await Parent.DeleteChart(ChartData.Id);
  }
}
