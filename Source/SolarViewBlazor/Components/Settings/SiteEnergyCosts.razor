@using AutoMapper
<table class="table table-settings">
  <tbody>
  <tr class="row">
    <th scope="row" class="col-sm-6 col-md-4">Cost per kWh (Peak)</th>
    <td class="col-sm-6 col-md-8 numeric-entry">
      <SfNumericTextBox TValue="double" @bind-Value="@_energyCosts.CostPerKWhPeak" Min="0.1" Step="0.01" Format="c8" />
    </td>
  </tr>
  <tr class="row">
    <th scope="row" class="col-sm-6 col-md-4">Cost per kWh (Off Peak)</th>
    <td class="col-sm-6 col-md-8 numeric-entry">
      <SfNumericTextBox TValue="double" @bind-Value="@_energyCosts.CostPerKWhOffPeak" Min="0.1" Step="0.01" Format="c8"/>
    </td>
  </tr>
  <tr class="row">
    <th scope="row" class="col-sm-6 col-md-4">Solar Buy Back</th>
    <td class="col-sm-6 col-md-8 numeric-entry">
      <SfNumericTextBox TValue="double" @bind-Value="@_energyCosts.SolarBuyBack" Min="0.1" Step="0.01" Format="c8" />
    </td>
  </tr>
  <tr class="row">
    <td colspan="2" class="col-12">
      <button class="btn btn-outline-primary btn-width-medium mt-2" disabled="@(!CanUpdate)" @onclick="Update">Update</button>
      <button class="btn btn-outline-primary btn-width-medium mt-2 ml-2" style="display: @CancelButtonDisplay" @onclick="RestoreEnergyCosts">Cancel</button>
    </td>
  </tr>
  </tbody>
</table>

<style>
  .numeric-entry {
    max-width: 200px
  }
</style>

@code {
  [Inject] ISiteViewModel SiteViewModel { get; set; }
  [Inject] ISiteEnergyCostsViewModel EnergyCostsViewModel { get; set; }
  [Inject] IMapper Mapper { get; set; }

  private IEnergyCosts _originalCosts = new EnergyCosts();
  private EnergyCosts _energyCosts = new EnergyCosts();
  private bool CanUpdate => _originalCosts.CalculateHashCode() != _energyCosts.CalculateHashCode();
  private string CancelButtonDisplay => CanUpdate ? "inline-block" : "none";

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if (firstRender)
    {
      _originalCosts = await EnergyCostsViewModel.GetEnergyCosts(SiteViewModel.CurrentSite.SiteId);

      // will be null if the data has never been created
      if (_originalCosts != null)
      {
        RestoreEnergyCosts();
        StateHasChanged();
      }
    }
  }

  private void Update()
  {
    // merge the data back to the Sites table
  }

  private void RestoreEnergyCosts()
  {
    _energyCosts = Mapper.Map<EnergyCosts>(_originalCosts);
  }
}
